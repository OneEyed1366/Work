import os, glob, telebot
from json import load, dump
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from Alarmer import alarm
from pathlib import Path

def search(path):
    if os.path.exists(path):
        return path
    elif os.path.exists(str(path).replace('–π', '–∏ÃÜ').replace('—ë', '–µÃà')):
        return str(path).replace('–π', '–∏ÃÜ').replace('—ë', '–µÃà')
    elif os.path.exists(str(path).replace('–π', '–∏ÃÜ')):
        return str(path).replace('–π', '–∏ÃÜ')
    elif os.path.exists(str(path).replace('—ë', '–µÃà')):
        return str(path).replace('—ë', '–µÃà')
    elif os.path.exists(str(path).replace('_', '?')):
        return str(path).replace('_', '?')
    elif os.path.exists(str(path).replace('?', '_')):
        return str(path).replace('?', '_')

if os.sys.platform == 'ios':
    os.chdir(
        os.path.join(
            '/private',
            'var',
            'mobile',
            'Library',
            'Mobile Documents',
            'iCloud~is~workflow~my~workflows',
            'Documents'
            )
        )    
elif os.sys.platform == 'win32':
    os.chdir(
        os.path.join( 
            'C:\\',
            'Users',
            'proka',
            'iCloudDrive',
            'iCloud~is~workflow~my~workflows'
            )
        )

#–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
with open(
    search(
        os.path.join(
            '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
            '–ë–æ—Ç—ã',
            'Telegram',
            '–ü—É–±–ª–∏—á–Ω—ã–π.txt'
            )
        ), encoding='utf-8'
    ) as f:
        bot_token = f.read()

bot = telebot.AsyncTeleBot(bot_token)
go_on = True
#–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
target = ''
fake_target = ""
law_target = ''
target_type = ''
obj_type = ''
#–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ö–∞—Ç–∞–ª–æ–≥–∞
objs = []
used_objs = []
homes = []
flats = []
chambers = [] 
commercial = []

with open(
    search(
        os.path.join(
            '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
            '–°–æ—Ü–∏–∞–ª–æ—á–∫–∞',
            '–ù–∞—à–∏ —É—Å–ª—É–≥–∏.json'
            )
            ), encoding='utf-8'
        ) as f:
            bd_services = load(f)


with open(
    search(
        os.path.join(
            '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
            '–°–æ—Ü–∏–∞–ª–æ—á–∫–∞',
            '–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã.json'
            )
            ), encoding = 'utf-8'
        ) as f:
            bd_we = load(f)

#–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
btn_back = InlineKeyboardButton('–ù–∞–∑–∞–¥')
btn_cat_all_types_inf = InlineKeyboardButton('–î—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
btn_home = InlineKeyboardButton('–í—Å–µ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏')
btn_types_obj = InlineKeyboardButton('–¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤')
btn_contact_agent = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–≥–µ–Ω—Ç–æ–º')
btn_contact_law = InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –Æ—Ä–∏—Å—Ç–æ–º')
btn_law_services = InlineKeyboardButton('–í—Å–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏')
# –°–ª–æ–≤–∞—Ä–∏
cat_types = {
    "–ö–æ–º–Ω–∞—Ç—ã": "–ö–æ–º–Ω–∞—Ç–∞",
    "–ö–≤–∞—Ä—Ç–∏—Ä—ã": "-–∫",
    "–î–æ–º–∞": "–î–æ–º",
    "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è"
}
#–°–ø–∏—Å–∫–∏
home_list = [
    '–ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤',
    # '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
    '–û –Ω–∞—Å'
    ]
about_list = [
    '–ö–∞–∫ –í–∞—Å –Ω–∞–π—Ç–∏?',
    '–£ –í–∞—Å –µ—Å—Ç—å —Å–∞–π—Ç?',
    '–ö–æ–≥–¥–∞ –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?', 
    '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –í—ã –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ?'
    ]
our_service_law_list = [
    '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –≤ –ø—Ä–æ—Å—Ç–æ–π –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ',
    '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–∞',
    '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ò–ø–æ—Ç–µ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫',
    '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ –ö–∞–ø–∏—Ç–∞–ª–∞',
    '–£–∑–∞–∫–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–æ–∫ –ö–≤–∞—Ä—Ç–∏—Ä/–î–æ–º–æ–≤',
    '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–º–µ—â–µ–Ω–∏—è –∏–∑ –ñ–∏–ª–æ–≥–æ –≤ –ù–µ–∂–∏–ª–æ–µ',
    '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –£—á–∞—Å—Ç–∫–∞',
    '–†–∞–∑–¥–µ–ª –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ 2 —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö',
    '–ó–∞–π–º—ã –ø–æ–¥ –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–π –ö–∞–ø–∏—Ç–∞–ª'
    ]
our_service_law_info_list = [
    '–í –∫–∞–∫–æ–º —Å–ª—É—á–∞–µ –í–∞–º —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ?',
    '–ß—å—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ?',
    '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
    '–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
    '–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
    ]
cat_obj_info_list = [
    '–û–ø–∏—Å–∞–Ω–∏–µ',
    '–¶–µ–Ω–∞',
    '–ß–µ—Ä—Ç—ë–∂', 
    '–§–æ—Ç–æ', 
    '–°—Å—ã–ª–∫–∏', 
    '–ú–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ'
    ]
cat_obj_info_links_list = [
    'YouTube', 
    '–ê–≤–∏—Ç–æ', 
    '–í–ö', 
    'OK',
    'Instagram'
    ]
cat_exept_list = [
    cat_obj_info_list,
    cat_obj_info_links_list
    ]
#–ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
(keyb_home, keyb_about_main, keyb_law_services, keyb_law_services_info, 
    keyb_cat_types_objs, keyb_cat_obj_info, keyb_cat_obj_info_links, 
    keyb_cat_commercial, keyb_cat_chambers, keyb_cat_flats, keyb_cat_homes) = (
    ReplyKeyboardMarkup(resize_keyboard=True) for _ in range(11))

for service in home_list:
    keyb_home.row(service)
#–û –Ω–∞—Å - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyb_about_main.row(btn_home)
keyb_about_main.row(btn_contact_agent, btn_contact_law)
for service in about_list:
    keyb_about_main.row(service)
#–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏ - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyb_law_services.row(btn_home, btn_contact_law)
for service in our_service_law_list:
    keyb_law_services.row(service)
    
keyb_law_services_info.row(btn_contact_law)
keyb_law_services_info.row(btn_home, btn_law_services)
for service in our_service_law_info_list:
    keyb_law_services_info.row(service)
#–ö–∞—Ç–∞–ª–æ–≥ - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyb_cat_types_objs.row(btn_home)
keyb_cat_types_objs.row(
    InlineKeyboardButton('–ö–æ–º–Ω–∞—Ç—ã'),
    InlineKeyboardButton('–ö–≤–∞—Ä—Ç–∏—Ä—ã'),
    InlineKeyboardButton('–î–æ–º–∞')
    )
keyb_cat_types_objs.row(
    InlineKeyboardButton('–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å')
    )

keyb_cat_obj_info.row(
    btn_home,
    btn_back,  
    btn_types_obj)
keyb_cat_obj_info.row(
    btn_contact_agent,
    btn_contact_law
    )
for service in cat_obj_info_list:
    keyb_cat_obj_info.row(service)

keyb_cat_obj_info_links.row(
    btn_home,
    btn_cat_all_types_inf, 
    btn_types_obj)
for type in cat_obj_info_links_list:
    keyb_cat_obj_info_links.row(type)

for keyboard in [keyb_cat_commercial, keyb_cat_chambers, keyb_cat_flats, keyb_cat_homes]:
    keyboard.row(btn_home, btn_types_obj)

@bot.message_handler(commands=["start"])
def start(msg):        
    bot.send_message(
        msg.chat.id, 
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}!\n–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å? üôÇ'.format(msg.from_user.first_name),
        reply_markup=keyb_home)
        
@bot.message_handler(content_types=['text'])
def chat_text(msg):
#–ó–∞–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global scheduler, users, target, law_target, fake_target, target_type, obj_type
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –Ω–∞—à–∏–º –±–æ—Ç–æ–º —Ä–∞–Ω–µ–µ
    try:
        with open (
            Path().joinpath(
                "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                "–ë–æ—Ç—ã",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.json"
            ), "r+", encoding="utf-8"
        ) as f:
            users = load(f)
    except:
        users = {}
    
    if str(msg.from_user.id) not in users:
        with open (
            Path().joinpath(
                "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                "–ë–æ—Ç—ã",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.json"
            ), "w+", encoding="utf-8"
        ) as f:
            users[msg.from_user.id] = msg.from_user.username

            dump(users, f)

        alarm(os.path.basename(__file__), f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.\n–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.username}\n\n–û–±—â–µ–µ —á–∏—Å–ª–æ: {len(users)}")


# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    # for key in cat_types:
    #     for obj in sorted(scheduler):
    #         if cat_types[key] in obj and (
    #             cat_types[key] not in keyb_cat_types_objs.to_json()
    #         ):
    #             keyb_cat_types_objs.row(InlineKeyboardButton(key))

    #             break
    # print(keyb_cat_types_objs.to_json())
    with open(
        search(
            os.path.join(
                '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
                '–°–æ—Ü–∏–∞–ª–æ—á–∫–∞',
                '–ö–∞—Ç–∞–ª–æ–≥.json')
                ), encoding='utf-8') as f:
                    scheduler = load(f)

    for obj in sorted(scheduler):
        if obj not in objs:
            if "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è" in obj:
                keyb_cat_commercial.row(obj)
            elif "–ö–æ–º–Ω–∞—Ç–∞" in obj:
                keyb_cat_chambers.row(obj)
            elif "-–∫" in obj:
                keyb_cat_flats.row(obj)
            elif "–î–æ–º" in obj:
                keyb_cat_homes.row(obj)
            
            objs.append(obj)
#–ó–∞–¥–∞—ë–º –ø—É—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    text_path = os.path.join(
        '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
        '–ê–≤–∏—Ç–æ',
        '{}.txt'.format(target)
        )
    photo_path = os.path.join(
        '–°–æ—Ü.–°–µ—Ç–∏',
        '{}'.format(target),
        'VK',
        '–§–æ—Ç–æ')
    scheme_path = os.path.join(
        '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
        '–§–æ—Ç–æ–±–∞–Ω–∫',
        '{}'.format(target),
        '–ß–µ—Ä—Ç–µ–∂_'
        )
    link_path = os.path.join(
        '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
        '–°–æ—Ü–∏–∞–ª–æ—á–∫–∞',
        '–°—Å—ã–ª–∫–∏',
        )
    bd_path = os.path.join(
        '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
        '–ë–î',
        '{}.json'.format(target)
    )
    
#–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
    if msg.text == '–í—Å–µ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏':
        bot.send_message(
            msg.chat.id, 
            '–•–æ—Ä–æ—à–æ! –í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å üôÇ',
            reply_markup=keyb_home
            )
#–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if (msg.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–≥–µ–Ω—Ç–æ–º'):
        bot.send_message(
            msg.chat.id,
            '–ö–æ–Ω–µ—á–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ê–≥–µ–Ω—Ç–∞...'
            )
        bot.send_contact(
            msg.chat.id,
            bd_we['–¢–µ–ª–µ—Ñ–æ–Ω—ã']['–ê–≥–µ–Ω—Ç'],
            '–ê–Ω–¥—Ä–µ–π'
            )
    
    elif (msg.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Æ—Ä–∏—Å—Ç–æ–º'):
        bot.send_message(
            msg.chat.id,
            '–ü–æ–Ω—è–ª–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Æ—Ä–∏—Å—Ç–∞...'
            )
        bot.send_contact(
            msg.chat.id,
            bd_we['–¢–µ–ª–µ—Ñ–æ–Ω—ã']['–Æ—Ä–∏—Å—Ç'],
            '–ò—Ä–∏–Ω–∞',
            '–ì–µ–Ω–Ω–∞–¥—å–µ–≤–Ω–∞'
            )
#–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
    if msg.text in our_service_law_info_list and law_target == '':
        bot.send_message(
            msg.chat.id,
            '–û–π-–µ–π, —è –∑–∞–±—ã–ª–∞, –æ —á—ë–º –í—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏!\n{}, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? ü•∫'.format(
                msg.from_user.first_name),
                reply_markup=keyb_law_services
            )
    else:
        if msg.text in our_service_law_list:
            if msg.text not in our_service_law_info_list:
                law_target = msg.text
        
        
    if msg.text == '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏':
        bot.send_message(
            msg.chat.id,
            '–ö–æ–Ω–µ—á–Ω–æ!\n–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üôÇ',
            reply_markup=keyb_law_services
            )
    elif msg.text == '–í—Å–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏':
        bot.send_message(
            msg.chat.id,
            '{}, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üôÇ'.format(
                msg.from_user.first_name),
            reply_markup=keyb_law_services
            )
    elif msg.text in our_service_law_list:
        if law_target in bd_services['–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏']:
            bot.send_message(
                msg.chat.id,
                '–ü–æ–Ω—è–ª–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                reply_markup=keyb_law_services_info
                )
        else:
            bot.send_message(
                msg.chat.id,
                '–û–π! –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å! ü•∫\n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
                )
    elif msg.text in our_service_law_info_list and law_target:
        if msg.text in bd_services['–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏'][law_target]:
            bot.send_message(
                msg.chat.id,
                '–ü–æ–Ω—è–ª–∞! üôÇ –û—Ç–ø—Ä–∞–ª—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n–¢–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞: {}\n–í–æ–ø—Ä–æ—Å: {}\n\n–û—Ç–≤–µ—Ç: {}'.format(
                    law_target,
                    msg.text,
                    bd_services['–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏'][law_target][msg.text])
                )
        else:
            bot.send_message(
                msg.chat.id,
                '–û–π! –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å! ü•∫\n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
                )
#–û –Ω–∞—Å
    if msg.text == '–û –Ω–∞—Å':
        bot.send_message(
           msg.chat.id,
           '{}, —á—Ç–æ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å? üôÇ'.format(
               msg.from_user.first_name),
           reply_markup=keyb_about_main
           )
    elif msg.text == '–ö–∞–∫ –í–∞—Å –Ω–∞–π—Ç–∏?':
        bot.send_message(
            msg.chat.id,
            '–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥.–†–æ—Å—Å–æ—à—å, —É–ª.–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è 120/2\n–ù–∞ —Ç–æ—Ä—Ü–µ –¥–æ–º–∞ –Ω–∞–ø–∏—Å–∞–Ω–æ: –°–µ–º–µ–π–Ω–æ–µ –ê–ù "–ü—Ä–æ–∫–æ–ø–µ–Ω–∫–æ –∏ –°—ã–Ω"\n\n–û—Å—Ç–∞–Ω–æ–≤–∫–∏:\n--–∫–∞—Ñ–µ "–û—Å–µ–Ω—å"\n--–æ–±—â–µ–∂–∏—Ç–∏–µ "–°—Ç—Ä–æ–∏—Ç–µ–ª—å"\n\n–í—Ö–æ–¥ —Å–æ –¥–≤–æ—Ä–∞'
            )
        bot.send_location(
            msg.chat.id,
            '50.1900493',
            '39.5772645'
            )
    elif msg.text == '–ö–æ–≥–¥–∞ –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?':
        bot.send_message(
            msg.chat.id,
            '–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ü—è—Ç–Ω–∏—Ü—É, —Å 08:30 –¥–æ 17:00\n\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Æ—Ä–∏—Å—Ç–æ–º"'
            )
        bot.send_message(
            msg.chat.id,
            '–ü–æ–∫–∞–∑—ã –æ–±—ä–µ–∫—Ç–æ–≤ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ü–æ–∫—É–ø–∞—Ç–µ–ª—è–º –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–∏–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏, –≤ –∑–∞—Ä–∞–Ω–µ–µ –æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ü—Ä–æ—Å–º–æ—Ç—Ä - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–≥–µ–Ω—Ç–æ–º"'
            )
    elif msg.text == '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –í—ã –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ?':
        bot.send_message(
            msg.chat.id,
            '–ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º –ü–æ—Å—Ä–µ–¥–Ω–∏—á–µ—Å–∫–∏–µ –∏ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Ç–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é\n–°—Ä–µ–¥–∏ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ - –ø–æ–º–æ—â—å –ø—Ä–∏ –ü—Ä–æ–¥–∞–∂–µ –æ–±—ä–µ–∫—Ç–∞, –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º –ó–∞–∫–∞–∑—á–∏–∫–∞, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –°–¥–µ–ª–∫–∏ –ö–ü (–°/–ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ø–æ—Ç–µ–∫–∏/–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ –ö–∞–ø–∏—Ç–∞–ª–∞)\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —É—Å–ª—É–≥—É –∏–∑ –ø—É–Ω–∫—Ç–∞ "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏" –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ —á–∞—Ç-–±–æ—Ç–∞'
            )
    elif msg.text == '–£ –í–∞—Å –µ—Å—Ç—å —Å–∞–π—Ç?':
        bot.send_message(
            msg.chat.id,
            '–ö–æ–Ω–µ—á–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é –í–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à —Å–∞–π—Ç. –¢–∞–º –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–µ–π –∫–∞—Ä—Ç–æ—Ç–µ–∫–æ–π, —É–∑–Ω–∞—Ç—å –æ–± –æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –Ω–∞–º–∏ —É—Å–ª—É–≥–∞—Ö, –∞ —Ç–∞–∫–∂–µ –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. üôÇ\n{0}'.format(
                bd_we['–°–∞–π—Ç'])
            )

#–ö–∞—Ç–∞–ª–æ–≥        
    if msg.text in objs: 
        target = scheduler[msg.text]['–ê–¥—Ä–µ—Å']
        fake_target = msg.text
        
        bot.send_message(
            msg.chat.id,
            '–•–æ—Ä–æ—à–æ! –ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –í–∞–º –Ω—É–∂–Ω–∞? üôÇ',
            reply_markup=keyb_cat_obj_info)
            
    elif (target or obj_type) == '' and (
        msg.text in (
            cat_obj_info_list or cat_obj_info_links_list)):
                bot.send_message(
                    msg.chat.id,
                    '–û–π! {}, —è –∑–∞–±—ã–ª–∞, —Å —á–µ–º –í—ã —Ä–∞–±–æ—Ç–∞–ª–∏!\n–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? ü•∫'.format(
                        msg.from_user.first_name),
                    reply_markup=keyb_cat_types_objs)
                    
                obj_type = msg.text
                    
    else:
        if msg.text == '–ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤':
            bot.send_message(
                msg.chat.id, 
                '{}, –∫–∞–∫–æ–≥–æ —Ä–æ–¥–∞ –æ–±—ä–µ–∫—Ç—ã –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üôÇ'.format(
                    msg.from_user.first_name),
                reply_markup=keyb_cat_types_objs)                     
            
        elif msg.text == '–¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤':
            bot.send_message(
                msg.chat.id, 
                '{}, –∫–∞–∫–æ–≥–æ —Ä–æ–¥–∞ –æ–±—ä–µ–∫—Ç—ã –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üôÇ'.format(
                    msg.from_user.first_name),
                reply_markup=keyb_cat_types_objs)
        
        elif msg.text == '–ö–æ–º–Ω–∞—Ç—ã':
            obj_type = msg.text
                
            bot.send_message(
                msg.chat.id, 
                '–¢–∞–∫, –ø–æ–Ω—è–ª–∞! –ö–æ–º–Ω–∞—Ç—ã! –í–æ—Ç, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å',
                reply_markup=keyb_cat_chambers)
            
        elif msg.text == '–ö–≤–∞—Ä—Ç–∏—Ä—ã':
            obj_type = msg.text
            
            bot.send_message(
                msg.chat.id, 
                '–ö–≤–∞—Ä—Ç–∏—Ä—ã? –ü–æ–Ω—è–ª–∞! –í–æ—Ç, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å',
                reply_markup=keyb_cat_flats)
        
        elif msg.text == '–î–æ–º–∞':
            obj_type = msg.text
            
            bot.send_message(
                msg.chat.id, 
                '–ê–≥–∞, –∑–Ω–∞—á–∏—Ç –î–æ–º–∞! –í–æ—Ç, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å',
                reply_markup=keyb_cat_homes)
        
        elif msg.text == '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å':
            obj_type = msg.text
            
            bot.send_message(
                msg.chat.id, 
                '–û–≥–æ! –ö–æ–º–º–µ—Ä—Ü–∏—è! –í–æ—Ç, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å',
                reply_markup=keyb_cat_commercial)
            
        else:
            if msg.text == '–ù–∞–∑–∞–¥' and obj_type:                
                if obj_type == '–ö–æ–º–Ω–∞—Ç—ã':
                    target_type = keyb_cat_chambers
                elif obj_type == '–ö–≤–∞—Ä—Ç–∏—Ä—ã':
                    target_type = keyb_cat_flats
                elif obj_type == '–î–æ–º–∞':
                    target_type = keyb_cat_homes
                elif obj_type == '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å':
                    target_type = keyb_cat_commercial
                     
                bot.send_message(
                    msg.chat.id,
                    '–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç {} üôÇ'.format(obj_type),
                    reply_markup=target_type
                    )
            
            elif (msg.text == '–¶–µ–Ω–∞') and target:
                if scheduler[fake_target]['–¶–µ–Ω–∞']:
                    price = scheduler[fake_target]['–¶–µ–Ω–∞']
                            
                    bot.send_message(
                        msg.chat.id,
                        '–ö–æ–Ω–µ—á–Ω–æ! üôÇ –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é —Ü–µ–Ω—É...\n\n–û–±—ä–µ–∫—Ç: {}\n\n–¶–µ–Ω–∞: {} —Ä—É–±.'.format(
                            fake_target,
                            price
                            )
                        )
                    
                else:
                    bot.send_message(
                        msg.chat.id,
                        '–û–π-–µ–π! –ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –æ –¶–µ–Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å!\n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üòÖüôà'
                        )
                            
            
            elif (msg.text == '–î—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') and target:
                bot.send_message(
                    msg.chat.id,
                    '–•–æ—Ä–æ—à–æ! –ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –í–∞–º –Ω—É–∂–Ω–∞? üôÇ',
                    reply_markup=keyb_cat_obj_info)
            
            elif (msg.text == '–û–ø–∏—Å–∞–Ω–∏–µ') and target:         
                if search(text_path):
                    with open(
                        search(text_path),
                        encoding='utf-8') as f:
                            bot.send_message(
                                msg.chat.id, 
                                '–ö–æ–Ω–µ—á–Ω–æ!\n\n–û–±—ä–µ–∫—Ç: {0}\n\n{1}'.format(
                                    fake_target,
                                    f.read()),
                                    reply_markup=keyb_cat_obj_info)
                else:
                    bot.send_message(
                        msg.chat.id, 
                        '–û–π, –ø—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è! –ü–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É —É –Ω–∞—Å –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å –æ–ø–∏—Å–∞–Ω–∏–µ... –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ!',
                        reply_markup=keyb_cat_obj_info)
                        
            elif (msg.text == '–§–æ—Ç–æ') and target:
                if (search(photo_path)) and (os.listdir(search(photo_path))):
                    bot.send_message(
                        msg.chat.id,
                        '–ü–æ–Ω—è–ª–∞! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...\n\n–û–±—ä–µ–∫—Ç: {}'.format(fake_target))
                        
                    for photo in glob.glob(
                        os.path.join(
                            search(photo_path),
                            '*')):
                            with open(photo, 'rb') as f:
                                bot.send_photo(
                                    msg.chat.id,
                                    f.read())
                            
                else:
                    bot.send_message(
                        msg.chat.id,
                        '–û–π, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è! –ü–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ!',
                        reply_markup=keyb_cat_obj_info)
                
            elif (msg.text == '–°—Å—ã–ª–∫–∏') and target:
                bot.send_message(
                    msg.chat.id,
                    '–•–æ—Ä–æ—à–æ! –ò—Ç–∞–∫, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫—É –Ω—É–∂–Ω–æ? ü•∫',
                    reply_markup=keyb_cat_obj_info_links
                    )
            elif (msg.text in cat_obj_info_links_list) and target:
                if search(
                    os.path.join(
                        link_path,
                        '{}'.format(msg.text),
                        '{}.txt'.format(target))):
                            with open(
                                search(
                                    os.path.join(
                                        link_path,
                                        '{}'.format(msg.text),
                                        '{}.txt'.format(target))),
                                        encoding='utf-8') as f:
                                                    bot.send_message(
                                                        msg.chat.id,
                                                        '–ö–æ–Ω–µ—á–Ω–æ. üôÇ\n\n–û–±—ä–µ–∫—Ç: {0}\n–°—Å—ã–ª–∫–∞ –Ω–∞ {1}\n{2}'.format(
                                                            fake_target,
                                                            msg.text,
                                                            f.read()),
                                                        reply_markup=keyb_cat_obj_info_links)
                    
                else:
                    bot.send_message(
                        msg.chat.id,
                        '–û–π! –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—â–µ –Ω–µ—Ç –≤ {}! –ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...'.format(msg.text),
                        reply_markup=keyb_cat_obj_info_links)
                                        
            elif (msg.text == '–ß–µ—Ä—Ç—ë–∂') and target:
                if (search(scheme_path)) and (os.listdir(search(scheme_path))):
                    bot.send_message(
                        msg.chat.id,
                        '–ö–æ–Ω–µ—á–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —á–µ—Ä—Ç—ë–∂...\n\n–û–±—ä–µ–∫—Ç: {}'.format(fake_target))
                        
                    for photo in glob.glob(
                        os.path.join(
                            search(scheme_path),
                            '*')):
                                with open(photo, 'rb') as f:
                                    bot.send_photo(
                                        msg.chat.id,
                                        f.read())
                            
                else:
                    bot.send_message(
                        msg.chat.id,
                        '–û–π, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è! –ü–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É —á–µ—Ä—Ç—ë–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!..',
                        reply_markup=keyb_cat_obj_info)
                        
            elif (msg.text == '–ú–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ') and target:
                if (search(bd_path)):
                    with open(
                        search(bd_path), 
                        encoding='utf-8') as f:
                            location = load(f)
                            
                    if (
                        location['–®–∏—Ä–æ—Ç–∞'] or location['–î–æ–ª–≥–æ—Ç–∞']) != '0' and (
                            location['–®–∏—Ä–æ—Ç–∞'] or location['–î–æ–ª–≥–æ—Ç–∞']) != '':
                                bot.send_message(
                                    msg.chat.id,
                                    '–•–æ—Ä–æ—à–æ! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é...\n\n–û–±—ä–µ–∫—Ç: {}'.format(
                                        fake_target
                                    )
                                )
                                
                                bot.send_location(
                                    msg.chat.id,
                                    location['–®–∏—Ä–æ—Ç–∞'],
                                    location['–î–æ–ª–≥–æ—Ç–∞'],
                                    reply_markup=keyb_cat_obj_info
                                    )
                    else:
                        bot.send_message(
                            msg.chat.id,
                            '–û–π! –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, —É –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è!\n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...',
                            reply_markup=keyb_cat_obj_info)

                else:
                    bot.send_message(
                        msg.chat.id,
                        '–û–π! –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å!\n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!..',
                        reply_markup=keyb_cat_obj_info
                    )
                    

# try:
#     bot.polling(none_stop=True)
# except KeyboardInterrupt:
#     print("–ó–∞–∫—Ä—ã–≤–∞—é —á–∞—Ç-–±–æ—Ç–∞ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! :)")
#     alarm(os.path.basename(__file__), "–ó–∞–∫—Ä—ã–≤–∞—é —á–∞—Ç-–±–æ—Ç–∞ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! :)")
# except Exception as e:
#     print(f"–û—à–∏–±–∫–∞! ({e})")
#     alarm(os.path.basename(__file__), f"–û—à–∏–±–∫–∞!\n{e}")

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
